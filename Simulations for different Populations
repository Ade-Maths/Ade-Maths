#######################FOUNDER POPULATIONS FOR p1 and p2###############################

Step 1: Set up simulation parameters
nInd <- 200   # Number of individuals
nChr <- 1     # Number of chromosomes
segSites <- 20 # Number of loci (codominant markers)

#Create founder populations and simulate parameters for each population

founderPop_P1 <- runMacs(nInd = nInd, nChr = nChr, segSites = segSites)
founderPop_P2 <- runMacs(nInd = nInd, nChr = nChr, segSites = segSites)


SP_P1 <- SimParam$new(founderPop_P1)  # Create SimParam object for P1
SP_P1$addSnpChip(nSnpPerChr = segSites)  # Add codominant markers (SNPs)

SP_P2 <- SimParam$new(founderPop_P2)  # Create SimParam object for P2
SP_P2$addSnpChip(nSnpPerChr = segSites)

Step 4: Generate populations P1 and P2
pop_P1 <- newPop(founderPop_P1, simParam = SP_P1)  # Use SP_P1 for P1
pop_P2 <- newPop(founderPop_P2, simParam = SP_P2)  # Use SP_P2 for P2
Step 5: Extract genotypes (multilocus, codominant markers)
genotypes_P1 <- pullSnpGeno(pop_P1, simParam = SP_P1)  # Extract using SP_P1
genotypes_P2 <- pullSnpGeno(pop_P2, simParam = SP_P2)  # Extract using SP_P2
Step 6: Export genotypic data to CSV for both populations
write.csv(genotypes_P1, file = "genotypes_P1.csv")
write.csv(genotypes_P2, file = "genotypes_P2.csv")

###############################SIMULATIONS###################

Estimate molecular markers that follows HWE
# Initialize a vector to store p-values for each marker

p_values <- numeric(ncol(genotypes_P1)) 

for (i in 1:ncol(genotypes_P1)) {   # Loop through each marker
 
  marker_genotypes <- genotypes_P1[, i]   # Extract genotype data for each  marker

  # Count the number of each genotype (0, 1, 2)
  
  count_0 <- sum(marker_genotypes == 0, na.rm = TRUE)
  count_1 <- sum(marker_genotypes == 1, na.rm = TRUE)
  count_2 <- sum(marker_genotypes == 2, na.rm = TRUE)

  
  total <- length(marker_genotypes[!is.na(marker_genotypes)])   # Total number of individuals

  # Calculate allele frequencies
  
  p <- (2 * count_2 + count_1) / (2 * total)  # Frequency of A
  q <- 1 - p  # Frequency of a

  

  # Calculate Expected Genotype Frequencies under HWE
  
  expected_0 <- q^2 * total  # Expected aa
  expected_1 <- 2 * p * q * total  # Expected Aa
  expected_2 <- p^2 * total  # Expected AA

  
  # Observed and expected genotype counts
  
  observed <- c(count_0, count_1, count_2)
  
  expected <- c(expected_0, expected_1, expected_2)

  
  if (all(expected > 0)) {   # Avoid division by zero in Chi-square test
   
    chi_square <- sum((observed - expected)^2 / expected)  # Chi-square test
    p_value <- pchisq(chi_square, df = 1, lower.tail = FALSE)
    p_values[i] <- p_value  # Store the p-value for each marker

    
  } else {
    p_values[i] <- NA  # If expected values are zero, mark p-value as NA
    
  }
}
Perform Multiple Testing Correction
p_values_bonferroni <- p.adjust(p_values, method = "bonferroni") # Bonferroni correction


p_values_fdr <- p.adjust(p_values, method = "fdr")   # Benjamini-Hochberg (FDR) correction
Store the results in a data frame
results <- data.frame(
  Marker = colnames(genotypes_P1),
  P_value = p_values,
  P_value_FDR = p_values_fdr
)
#Print the molecular markers that follow Hardy-Weinberg equilibrium using FDR correction
markers_follow_hwe <- results[!is.na(results$Marker) & !is.na(results$P_value_FDR) &  results$P_value_FDR > 0.05, ] # Filter out rows with NA values 

cat("\nMarkers that follow HWE (FDR-corrected p-value > 0.05):\n")
## 
## Markers that follow HWE (FDR-corrected p-value > 0.05):
dim(markers_follow_hwe)
## [1] 20  3
print(markers_follow_hwe)

#######################SELF FERTILIZATION, P1######################

df <- read.csv('genotypes_P1.csv');
cell_value <- df[1, 5];
print(cell_value)


# Simulating self-fertilization of P1
# Assuming self-fertilization means taking the genotype values and applying a simple model
self_fertilization <- function(genotype) {
  # For simplicity, let's assume self-fertilization retains the same genotype values
  return(genotype)
}

# Applying the self-fertilization function to the first row (P1)
P1_self_fertilization <- self_fertilization(df[1, -1])  # Exclude the first column (index)
print(P1_self_fertilization)

write.csv(P1_self_fertilization, file = "genotypes_P3.csv")

##################################SELFING P2#########################

 Generating P3: self-fertilization of P1 for 200 individuals
# Assuming self-fertilization means creating a new dataset with the same genotype values for 200 individuals
set.seed(42)  # For reproducibility
num_individuals <- 200
P1_self_fertilization_200 <- data.frame(matrix(nrow = num_individuals, ncol = ncol(df)-1))  # Exclude the first column (index)
colnames(P1_self_fertilization_200) <- colnames(df)[-1]  # Set column names

# Fill the new dataframe with the genotype values of P1
for (i in 1:num_individuals) {
  P1_self_fertilization_200[i, ] <- df[1, -1]  # Copy P1 genotype values
}

print(head(P1_self_fertilization_200))

##############################HYBRIDIZATION#############################################

library(ggplot2)

# Define parental lines P1 and P2
P1 <- c("A", "A", "B", "B", "C", "C")
P2 <- c("a", "a", "b", "b", "c", "c")

# Function to simulate hybridization
hybridize <- function(P1, P2) {
  hybrid <- vector("character", length(P1))
  for (i in 1:length(P1)) {
    hybrid[i] <- sample(c(P1[i], P2[i]), 1)
  }
  return(hybrid)
}

# Generate hybrid offspring
F1 <- hybridize(P1, P2)

# Display results
cat("Parent 1 (P1):", P1, "\n")
cat("Parent 2 (P2):", P2, "\n")
cat("Hybrid (F1):", F1, "\n")

# Visualize the hybridization
data <- data.frame(
  Parent = rep(c("P1", "P2", "F1"), each = length(P1)),
  Gene = rep(1:length(P1), 3),
  Allele = c(P1, P2, F1)
)

ggplot(data, aes(x = Gene, y = Parent, fill = Allele)) +
  geom_tile() +
  scale_fill_manual(values = c("A" = "blue", "a" = "lightblue", "B" = "green", "b" = "lightgreen", "C" = "red", "c" = "pink")) +
  theme_minimal() +
  labs(title = "Hybridization Cross",x = "Gene", y = "Parent")
  

##################################MIXING POPULATION##############################
breed_populations <- function(P1, P22, generations = 1, mutation_rate = 0.01) {
  # Check that both populations have the same dimensions
  stopifnot(dim(P1) == dim(P2))
  num_individuals <- nrow(P1)
  num_traits <- ncol(P1)
  
  # Run the breeding simulation for the specified number of generations
  for (gen in 1:generations) {
    # Initialize the offspring matrix
    offspring <- matrix(0, nrow = num_individuals, ncol = num_traits)
    
    # Mix individuals from both populations
    for (i in 1:num_individuals) {
      # Select parents from each population
      parent1 <- P1[i, ]
      parent2 <- P2[i, ]
      
      # Create offspring by averaging the parents' traits
      child <- (parent1 + parent2) / 2
      
      # Apply mutation
      mutation <- rnorm(num_traits, mean = 0, sd = mutation_rate)
      child <- child + mutation
      
      # Store child in offspring matrix
      offspring[i, ] <- child
    }
    
    # Update populations for the next generation
    P1 <- offspring
    P2 <- offspring
  }
  
  return(offspring)
}

To use this function, initialize two example populations with random data and call breed_populations:

# Initialize example populations
set.seed(0)
P1 <- matrix(runif(200 * 5), nrow = 200, ncol = 5)
P2 <- matrix(runif(200 * 5), nrow = 200, ncol = 5)

# Run breeding program
offspring <- breed_populations(P1,P2, generations = 5, mutation_rate = 0.02)
print(offspring)

##########################################RETROCROSSING (P5 x P1)######################################
retro_cross_population <- function(P5, P1, generations = 1, mutation_rate = 0.01) {
  # Check that both populations have the same dimensions
  if (!all(dim(P5) == dim(P1))) {
    stop("Both populations must have the same dimensions.")
  }
  
  num_individuals <- nrow(P5)
  num_traits <- ncol(P5)
  
  # Start with an initial hybrid population as offspring of both populations
  offspring <- matrix(0, nrow = num_individuals, ncol = num_traits)
  
  # First cross between recurrent and donor population to create the initial hybrid
  for (i in 1:num_individuals) {
    parent1 <- P5[i, ]
    parent2 <- P1[i, ]
    offspring[i, ] <- (parent1 + parent2) / 2
  }
  
  # Backcross with the recurrent parent for the specified number of generations
  for (gen in 1:generations) {
    new_offspring <- matrix(0, nrow = num_individuals, ncol = num_traits)
    
    for (i in 1:num_individuals) {
      # Backcross with recurrent parent
      parent1 <- P5[i, ]
      parent2 <- P1[i, ]
      
      # Average traits, favoring the recurrent parent
      child <- (2 * parent1 + parent2) / 3
      
      # Apply mutation
      mutation <- rnorm(num_traits, mean = 0, sd = mutation_rate)
      child <- child + mutation
      
      # Store child in new offspring matrix
      new_offspring[i, ] <- child
    }
    
    # Update offspring for the next generation
    offspring <- new_offspring
  }
  
  return(offspring)
}

# Initialize example populations
set.seed(0)
recurrent_pop <- matrix(runif(200 * 5), nrow = 200, ncol = 5)
donor_pop <- matrix(runif(200 * 5), nrow = 200, ncol = 5)

# Perform retrocrossing
final_offspring <- retro_cross_population(recurrent_pop, donor_pop, generations = 5, mutation_rate = 0.02)
print(final_offspring)
